#!/bin/bash

# ====================================
# Script Training LoRA cho Stable Diffusion
# ====================================

set -e  # Exit on any error

echo "üöÄ B·∫Øt ƒë·∫ßu quy tr√¨nh training Stable Diffusion v·ªõi LoRA"

# C·∫•u h√¨nh m·∫∑c ƒë·ªãnh
DATA_DIR="./dataset"
OUTPUT_DIR="./lora_output"
MODEL_NAME="runwayml/stable-diffusion-v1-5"
EPOCHS=50
BATCH_SIZE=1
LEARNING_RATE=1e-4
RANK=16
ALPHA=32

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --data_dir)
            DATA_DIR="$2"
            shift 2
            ;;
        --output_dir)
            OUTPUT_DIR="$2"
            shift 2
            ;;
        --epochs)
            EPOCHS="$2"
            shift 2
            ;;
        --batch_size)
            BATCH_SIZE="$2"
            shift 2
            ;;
        --learning_rate)
            LEARNING_RATE="$2"
            shift 2
            ;;
        --rank)
            RANK="$2"
            shift 2
            ;;
        --alpha)
            ALPHA="$2"
            shift 2
            ;;
        -h|--help)
            echo "Usage: $0 [OPTIONS]"
            echo "Options:"
            echo "  --data_dir DIR        Dataset directory (default: ./dataset)"
            echo "  --output_dir DIR      Output directory (default: ./lora_output)"
            echo "  --epochs N            Number of epochs (default: 50)"
            echo "  --batch_size N        Batch size (default: 1)"
            echo "  --learning_rate LR    Learning rate (default: 1e-4)"
            echo "  --rank N              LoRA rank (default: 16)"
            echo "  --alpha N             LoRA alpha (default: 32)"
            echo "  -h, --help            Show this help"
            exit 0
            ;;
        *)
            echo "Unknown option: $1"
            exit 1
            ;;
    esac
done

# Ki·ªÉm tra GPU
echo "üîç Checking GPU availability..."
if python -c "import torch; print('‚úÖ CUDA available:', torch.cuda.is_available())"; then
    DEVICE="cuda"
else
    echo "‚ö†Ô∏è  CUDA not available, s·ª≠ d·ª•ng CPU (s·∫Ω ch·∫≠m h∆°n)"
    DEVICE="cpu"
fi

# T·∫°o th∆∞ m·ª•c c·∫ßn thi·∫øt
mkdir -p "$OUTPUT_DIR"
mkdir -p "logs"

# Step 1: Chu·∫©n b·ªã dataset (n·∫øu ch∆∞a c√≥)
if [ ! -d "$DATA_DIR/processed" ] && [ ! -d "$DATA_DIR/augmented" ]; then
    echo "üìÅ Dataset ch∆∞a ƒë∆∞·ª£c chu·∫©n b·ªã. Vui l√≤ng ch·∫°y:"
    echo "python training/dataset_preparation.py --source_dir YOUR_SOURCE_DIR --output_dir $DATA_DIR --use_vietnamese_prompts"
    exit 1
fi

# Step 2: Training LoRA
echo "üéØ B·∫Øt ƒë·∫ßu training LoRA..."
echo "  üìä Epochs: $EPOCHS"
echo "  üì¶ Batch size: $BATCH_SIZE"
echo "  üìà Learning rate: $LEARNING_RATE"
echo "  üîß LoRA rank: $RANK, alpha: $ALPHA"

# X√°c ƒë·ªãnh th∆∞ m·ª•c dataset
if [ -d "$DATA_DIR/augmented" ]; then
    TRAIN_DATA_DIR="$DATA_DIR/augmented"
else
    TRAIN_DATA_DIR="$DATA_DIR/processed"
fi

python training/train_lora.py \
    --data_dir "$TRAIN_DATA_DIR" \
    --output_dir "$OUTPUT_DIR" \
    --pretrained_model_name_or_path "$MODEL_NAME" \
    --resolution 512 \
    --train_batch_size "$BATCH_SIZE" \
    --num_train_epochs "$EPOCHS" \
    --learning_rate "$LEARNING_RATE" \
    --lr_scheduler "cosine" \
    --lr_warmup_steps 100 \
    --rank "$RANK" \
    --alpha "$ALPHA" \
    --dropout 0.1 \
    --mixed_precision "fp16" \
    --gradient_accumulation_steps 4 \
    --max_grad_norm 1.0 \
    --save_steps 250 \
    --logging_dir "logs" \
    --validation_prompt "phong c·∫£nh Vi·ªát Nam ƒë·∫πp, n√∫i non h√πng vƒ©, high quality, detailed" \
    --validation_steps 250 \
    --num_validation_images 4 \
    --seed 42

echo "‚úÖ Training ho√†n th√†nh!"

# Step 3: Convert sang OpenVINO
echo "üîÑ Converting model sang OpenVINO format..."

OPENVINO_OUTPUT="./models/custom_trained_ov"
python training/convert_to_openvino.py \
    --model_path "$MODEL_NAME" \
    --lora_path "$OUTPUT_DIR" \
    --output_path "$OPENVINO_OUTPUT" \
    --fp16

echo "‚úÖ Conversion ho√†n th√†nh!"

# Step 4: Test model
echo "üß™ Testing trained model..."
python img2img.py

# Hi·ªÉn th·ªã k·∫øt qu·∫£
echo ""
echo "üéâ Quy tr√¨nh ho√†n th√†nh!"
echo "üìÅ LoRA weights: $OUTPUT_DIR"
echo "üìÅ OpenVINO model: $OPENVINO_OUTPUT"
echo "üìÅ Logs: logs/"
echo ""
echo "üí° ƒê·ªÉ s·ª≠ d·ª•ng model m·ªõi, c·∫≠p nh·∫≠t MODEL_DIR trong app.py v√† img2img.py:"
echo "   MODEL_DIR = \"$OPENVINO_OUTPUT\""
echo ""
echo "üöÄ Ch·∫°y ·ª©ng d·ª•ng:"
echo "   python app.py" 